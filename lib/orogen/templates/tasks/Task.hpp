/* Generated from orogen/lib/orogen/templates/tasks/Task.hpp */

#ifndef <%= task.full_namespace.tr(":","_").upcase %>_<%= task.basename.upcase %>_TASK_HPP
#define <%= task.full_namespace.tr(":","_").upcase %>_<%= task.basename.upcase %>_TASK_HPP

#include "<%= project.name.downcase %>/<%= task.basepath %><%= task.basename %>Base.hpp"

<% task.full_namespace.split("::").each do |space| %>
namespace <%= space %> {
<% end %>
    <%
    doc = task.doc || "this task has no documentation, write one as a comment"\
                        "block before the task_context statement in the orogen file"

    short_doc, *long_doc = doc.split("\n")
    %>/*! \class <%= task.basename %>
     * \brief <%= short_doc %><%= "\n     *" + long_doc.join("\n     * ") unless long_doc.empty? %>
     */
    class <%= task.basename %> : public <%= task.basename %>Base
    {
        /** The base class is auto-generated by orogen to define the task's interface
         *
         * It is located in the .orogen/tasks folder
         */
        friend class <%= task.basename %>Base;

    protected:
<%= task.self_user_methods.sort_by(&:name)
        .map { |m| m.with_indent(8, :declaration) }
        .compact.join("\n\n") %>
    public:
        /** TaskContext constructor for <%= task.basename %>
         * \param name Name of the task. This name needs to be unique to make
         *             it identifiable via nameservices.
         * \param initial_state The initial TaskState of the TaskContext.
         *                      This is deprecated. It should always be the
         *                      configure state.
         */
        <%= task.basename %>(std::string const& name = "<%= task.name %>"<%= ", TaskCore::TaskState initial_state = Stopped" unless task.fixed_initial_state? %>);

        ~<%= task.basename %>();

        /**
         * Hook called when the state machine transitions from PreOperational to
         * Stopped.
         *
         * If the code throws an exception, the transition will be aborted
         * and the component will end in the EXCEPTION state instead
         *
         * @return true if the transition can continue, false otherwise
         */
        bool configureHook();

        /**
         * Hook called when the state machine transition from Stopped to Running
         *
         * If the code throws an exception, the transition will be aborted
         * and the component will end in the EXCEPTION state instead
         *
         * @return true if the transition is successful, false otherwise
         */
        bool startHook();

        /**
         * Hook called on trigger in the Running state
         *
         * When this hook is exactly called depends on the chosen task's activity.
         * For instance, if the task context is declared as periodic in the orogen
         * specification, the task will be called at a fixed period.
         *
         * See Rock's documentation for a list of available triggering mechanisms
         *
         * The error(), exception() and fatal() calls, when called in this hook,
         * allow to get into the associated RunTimeError, Exception and
         * FatalError states.
         */
        void updateHook();

        /**
         * Hook called in the RuntimeError state, under the same conditions than
         * the updateHook
         *
         * Call recover() to go back in the Runtime state.
         */
        void errorHook();

        /**
         * Hook called when the component transitions out of the Running state
         *
         * This is called for any transition out of running, that is the
         * transitions to Stopped, Exception and Fatal
         */
        void stopHook();

        /**
         * Hook called on all transitions to PreOperational
         *
         * This is called for all transitions into PreOperational, that is
         * either from Stopped or Exception
         */
        void cleanupHook();
    };
<% task.full_namespace.split("::").each do |space| %>
}
<% end %>

#endif
